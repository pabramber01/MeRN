openapi: 3.0.3
info:
  title: MeRN
  description: |
    API description for MeRightNow social network. 

    All endpoints need authentication, so first, create an user or login with one.
  version: 1.1.2
  contact: {}
servers:
  - url: 'https://api-merightnow.onrender.com/mern/v1'
  - url: 'http://localhost:8000/mern/v1'
paths:
  /users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Get all users
      operationId: getAllUsersAdminSolo
      parameters:
        - name: after
          in: query
          description: Minimum date to be searched. If omitted, there is no lower limit in the search.
          schema:
            type: string
            example: '1999-04-22T12:58:03.378Z'
        - name: before
          in: query
          description: Maximum date to be searched. If omitted, there is no upper limit in the search.
          schema:
            type: string
            example: '2023-04-22T12:58:03.378Z'
        - name: sort
          description: |
            Valid attributes are: username.

            The sorting can be performed on several attributes by concatenating them with the character ",".

            The default sorting order is ascending, indicate the "-" char in front of the attribute to be sorted descending.

            Default sort: username.
          in: query
          schema:
            type: string
            example: 'username'
        - name: q
          in: query
          description: Username to search.
          schema:
            type: string
            example: ''
        - name: page
          in: query
          description: Number of page.
          schema:
            type: string
            example: '1'
      responses:
        '':
          description: ''
    post:
      tags:
        - Users
      summary: Create user
      description: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email.
                  example: paco@chocolatero.com
                password:
                  type: string
                  description: User's password.
                  example: paco
                username:
                  type: string
                  description: User's username.
                  example: paco
            example:
              email: paco@chocolatero.com
              password: paco
              username: paco
      responses:
        '':
          description: ''
  /users/own:
    get:
      tags:
        - Users
      summary: Get user personal data
      description: Get user personal data
      operationId: getUserPersonalData
      responses:
        '':
          description: ''
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete user
      operationId: deleteUser
      responses:
        '':
          description: ''
    patch:
      tags:
        - Users
      summary: Update user data
      description: Update user data
      operationId: updateUserData
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: |
                    User's avatar (file). 

                    If not provided, random avatar is asigned. 

                    Also can explicit old avatar url, so it is not modified. 
                    As swagger does not allow multiple types including file type
                    (binary format string), this can be tried with postman.
                email:
                  type: string
                  description: User's email.
                  example: example@updated.com
                username:
                  type: string
                  description: User's username.
                  example: updated
      responses:
        '':
          description: ''
  /users/own/change-password:
    patch:
      tags:
        - Users
      summary: Update password
      description: Update password
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPass:
                  type: string
                  description: User's new password.
                  example: passupdated
                oldPass:
                  type: string
                  description: User's old password.
                  example: user2
            example:
              newPass: passupdated
              oldPass: user2
      responses:
        '':
          description: ''
  /users/own/follows:
    get:
      tags:
        - Users
      summary: Get all follows by user
      description: Get all follows by user
      operationId: getAllFollowsByUser
      parameters:
        - name: sort
          description: |
            Valid attributes are: username.

            The sorting can be performed on several attributes by concatenating them with the character ",".

            The default sorting order is ascending, indicate the "-" char in front of the attribute to be sorted descending.

            Default sort: username.
          in: query
          schema:
            type: string
            example: 'username'
        - name: q
          in: query
          description: Username to search.
          schema:
            type: string
            example: ''
        - name: page
          in: query
          description: Number of page.
          schema:
            type: string
            example: '1'
      responses:
        '':
          description: ''
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user public data
      description: Get user public data
      operationId: getUserPublicData
      parameters:
        - name: id
          in: path
          description: User's id. Can be mongoId or username.
          required: true
          schema:
            type: string
            example: user2
      responses:
        '':
          description: ''
  /users/{id}/publications:
    get:
      tags:
        - Users
      summary: Get all publications by user
      description: Get all publications by user
      operationId: getAllPublicationsByUser
      parameters:
        - name: id
          in: path
          description: User's id. Can be mongoId or username.
          required: true
          schema:
            type: string
            example: user2
        - name: after
          in: query
          description: Minimum date to be searched. If omitted, there is no lower limit in the search.
          schema:
            type: string
            example: '1999-04-22T12:58:03.378Z'
        - name: before
          in: query
          description: Maximum date to be searched. If omitted, there is no upper limit in the search.
          schema:
            type: string
            example: '2023-04-22T12:58:03.378Z'
        - name: sort
          in: query
          description: |
            Valid attributes are: createdAt,updatedAt.

            The sorting can be performed on several attributes by concatenating them with the character ",".

            The default sorting order is ascending, indicate the "-" char in front of the attribute to be sorted descending.

            Default sort: -updatedAt.
          schema:
            type: string
            example: '-updatedAt'
        - name: page
          in: query
          description: Number of page.
          schema:
            type: string
            example: '1'
      responses:
        '':
          description: ''
  /users/{id}/follow:
    patch:
      tags:
        - Users
      summary: Follow user
      description: Follow user
      operationId: followUser
      parameters:
        - name: id
          in: path
          description: User's id. Can be mongoId or username.
          required: true
          schema:
            type: string
            example: user3
      responses:
        '':
          description: ''
  /users/{id}/unfollow:
    patch:
      tags:
        - Users
      summary: Unfollow user
      description: Unfollow user
      operationId: unfollowUser
      parameters:
        - name: id
          in: path
          description: User's id. Can be mongoId or username.
          required: true
          schema:
            type: string
            example: user3
      responses:
        '':
          description: ''
  /users/{id}/ban:
    patch:
      tags:
        - Admin
      summary: Ban user
      description: Ban user
      operationId: banUserAdminSolo
      parameters:
        - name: id
          in: path
          description: User's id. Can be mongoId or username.
          required: true
          schema:
            type: string
            example: user3
      responses:
        '':
          description: ''
  /users/{id}/unban:
    patch:
      tags:
        - Admin
      summary: Unban user
      description: Unban user
      operationId: unbanUserAdminSolo
      parameters:
        - name: id
          in: path
          description: User's id. Can be mongoId or username.
          required: true
          schema:
            type: string
            example: user3
      responses:
        '':
          description: ''
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Login user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: User's password.
                  example: user2
                username:
                  type: string
                  description: User's username.
                  example: user2
            example:
              password: user2
              username: user2
      responses:
        '':
          description: ''
  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logout user
      description: Logout user
      operationId: logoutUser
      responses:
        '':
          description: ''
  /publications:
    get:
      tags:
        - Publications
      summary: Get all publications
      description: Get all publications
      operationId: getAllPublications
      parameters:
        - name: after
          in: query
          description: Minimum date to be searched. If omitted, there is no lower limit in the search.
          schema:
            type: string
            example: '1999-04-22T12:58:03.378Z'
        - name: before
          in: query
          description: Maximum date to be searched. If omitted, there is no upper limit in the search.
          schema:
            type: string
            example: '2023-04-22T12:58:03.378Z'
        - name: sort
          in: query
          description: |
            Valid attributes are: createdAt,updatedAt.

            The sorting can be performed on several attributes by concatenating them with the character ",".

            The default sorting order is ascending, indicate the "-" char in front of the attribute to be sorted descending.

            Default sort: -updatedAt.
          schema:
            type: string
            example: '-updatedAt'
        - name: q
          in: query
          description: Username, title or description to search.
          schema:
            type: string
            example: ''
        - name: page
          in: query
          description: Number of page.
          schema:
            type: string
            example: '1'
      responses:
        '':
          description: ''
    post:
      tags:
        - Publications
      summary: Create publication
      description: Create publication
      operationId: createPublication
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Publication's description.
                  example: ''
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Publication's images (files).
                title:
                  type: string
                  description: Publication's title.
                  example: testpub
      responses:
        '':
          description: ''
  /publications/{id}:
    get:
      tags:
        - Publications
      summary: Get publication by id
      description: Get publication by id
      operationId: getPublicationById
      parameters:
        - name: id
          in: path
          description: Publication's id.
          required: true
          schema:
            type: string
            example: 63e6608d2397e6b0a1e0f9a4
      responses:
        '':
          description: ''
    delete:
      tags:
        - Publications
      summary: Delete publication
      description: Delete publication
      operationId: deletePublication
      parameters:
        - name: id
          in: path
          description: Publication's id.
          required: true
          schema:
            type: string
            example: 63e660983b381b1a6ba422f5
      responses:
        '':
          description: ''
    patch:
      tags:
        - Publications
      summary: Update publication
      description: Update publication
      operationId: updatePublication
      parameters:
        - name: id
          in: path
          description: Publication's id.
          required: true
          schema:
            type: string
            example: 63e66070e7b05efa94ac218d
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Publication's description.
                  example: descriptionupdated
                newImg:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Publication's new images (files).
                oldImg:
                  type: array
                  items:
                    type: string
                  description: Publication's old images (old urls).
                title:
                  type: string
                  description: Publication's title.
                  example: titleupdated
      responses:
        '':
          description: ''
  /publications/{id}/comments:
    get:
      tags:
        - Publications
      summary: Get all comments by publication id
      description: Get all comments by publication id
      operationId: getAllCommentsByPublicationId
      parameters:
        - name: id
          in: path
          description: Publication's id.
          required: true
          schema:
            type: string
            example: 63e65f008c924cea3068c31f
        - name: after
          in: query
          description: Minimum date to be searched. If omitted, there is no lower limit in the search.
          schema:
            type: string
            example: '1999-04-22T12:58:03.378Z'
        - name: before
          in: query
          description: Maximum date to be searched. If omitted, there is no upper limit in the search.
          schema:
            type: string
            example: '2023-04-22T12:58:03.378Z'
        - name: sort
          in: query
          description: |
            Valid attributes are: createdAt.

            The sorting can be performed on several attributes by concatenating them with the character ",".

            The default sorting order is ascending, indicate the "-" char in front of the attribute to be sorted descending.

            Default sort: -createdAt.
          schema:
            type: string
            example: '-createdAt'
        - name: page
          in: query
          description: Number of page.
          schema:
            type: string
            example: '1'
      responses:
        '':
          description: ''
  /publications/{id}/like:
    patch:
      tags:
        - Publications
      summary: Like publication
      description: Like publication
      operationId: likePublication
      parameters:
        - name: id
          in: path
          description: Publication's id.
          required: true
          schema:
            type: string
            example: 63e66070e7b05efa94ac218d
      responses:
        '':
          description: ''
  /publications/{id}/dislike:
    patch:
      tags:
        - Publications
      summary: Dislike publication
      description: Dislike publication
      operationId: dislikePublication
      parameters:
        - name: id
          in: path
          description: Publication's id.
          required: true
          schema:
            type: string
            example: 63e66070e7b05efa94ac218d
      responses:
        '':
          description: ''
  /comments:
    post:
      tags:
        - Comments
      summary: Create comment
      description: Create comment
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: Comment's text.
                  example: this is a comment
                publication:
                  type: string
                  description: Publication's id.
                  example: 63e66070e7b05efa94ac218d
            example:
              comment: this is a comment
              publication: 63e66070e7b05efa94ac218d
      responses:
        '':
          description: ''
  /comments/{id}:
    delete:
      tags:
        - Comments
      summary: Delete comment
      description: Delete comment
      operationId: deleteComment
      parameters:
        - name: id
          in: path
          description: Comment's id.
          required: true
          schema:
            type: string
            example: 642c315b2c53166bc7c4cfc4
      responses:
        '':
          description: ''
    patch:
      tags:
        - Comments
      summary: Update comment
      description: Update comment
      operationId: updateComment
      parameters:
        - name: id
          in: path
          description: Comment's id.
          required: true
          schema:
            type: string
            example: 642c315b2c53166bc7c4cfc4
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: Comment's text.
                  example: updated comment
            example:
              comment: updated comment
      responses:
        '':
          description: ''
tags:
  - name: Auth
  - name: Users
  - name: Publications
  - name: Comments
  - name: Admin
